最好能掌握git的基本用法
常用的内容用熟练了就不会忘记了，容易忘记的再来这里查看。


1.  git了解
   分布式版本控制系统。
   分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，
   这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。
   既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，
   你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。


2.  git安装
   用Debian或Ubuntu Linux，通过一条sudo apt-get install git就可以直接完成Git的安装
   如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，
   依次输入：./config，make，sudo make install这几个命令安装就好了。
   msysgit是Windows版的Git，从https://git-for-windows.github.io下载然后按默认选项安装即可。
   --设置
   $ git config --global user.name "Your Name"
   $ git config --global user.email "email@example.com"


3.  git仓库创建
   创建一个git仓库，通过git管理里面的文件，进行版本控制 
   $ mkdir learngit
   $ cd learngit
   $ git init

4.  git初体验 
   仓库目录下创建一个文件 readme.txt   里面写 Hello Git  
   $ git add readme.txt                           （添加这个文件给git）  
   $ git commit -m "wrote a readme file"          （提交这个文件给git， -m 加描述）


5.  版本的更新  
   刚才的readme.txt (Hello Git)是: 一号版本 
   现在需要变为readme.txt (Hello World)是： 二号版本

   $ git status            (查看git工作区状态，这里显然readme.txt 改变了） （尚未添加，尚未提交） 
   $ git diff readme.txt    （查看 版本一 和 版本二 有什么不同， 哪里改变了）

   如下：
   --- a/readme.txt
   +++ b/readme.txt
   @@ -1 +1 @@
   -Hello Git 
   +Hello World !
  （--是删除了， ++是添加了） 

   $ git add readme.txt                         （确认无误，放心添加）  
   $ git commit -m "change Git to World"        （加好描述，提交给git） （完成了 版本一 更新 为版本二）  
   $ git status                                 （再次检查， 工作区干净）  

6.  版本的退回 

   在通过之前方式，提交一个版本三： readme.txt ( Hello github and git !) 
   $ git log                         (查看日志， 会看到所有的三个版本，和他们的描述信息 就是-m )
   $ git log --pretty=oneline       （更加简洁的显示） 
   
   显示中：3628164fb26d48395383f8f31179f24e0882e1e0  类似的字符串 ，是git给版本定的ID  代表唯一版本，不用1，2，3是因为git是好多人一起工作，总会重复的。 
   现在改变版本三 变为 版本一 ：
   $ git reset --hard HEAD^                          （返回上一版本） （用HEAD表示当前版本）（用HEAD^表示上一版本）
   $ git reset --hard HEAD^                          （返回了两次，到了版本一，若想返回n次用HEAD～n，新的版本会消失） 
   $ git reflog                                      （查看你的每一次命令，找到最新版本的ID就能返回最新版本了） 
   $ git reset --hard 3628164                        （只要写上ID的前几位就可以了）  
   
 7.  撤销修改 和 删除文件 
 
   如果添加的“修改过的文件”不想要了， 可以丢弃掉 
   $ git status                       （先查看以下 ，添加到git中的东西）  
   $ git checkout -- readme.txt       （把想丢弃的丢丢弃掉 ，readme.txt 的版本四） 
   
   场景1：
       当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

   场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
         分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
         
   $ rm readme.txt               (删除了文件） 
   
   对于git你有两种操作可选择：
   $ git rm test.txt             （真的要删除这个文件， 并且git中也删除了） 
   $ git commit -m "remove test.txt"   （git是操作“修改文件的动作“ ，不是操作文件）  
   
   或者：
   $ git checkout -- test.txt       （你删错文件了，把缓存区的操作丢弃） 
   
   
 8. 远程仓库  
   
   以上操作只是在本机就可以进行，要是想要管理远程仓库的文件或者项目版本，就需要远程仓库（可以是在远程服务器上） ，但是有了Github， 就很满足了。
   关于github的操作在： 
   
   
   
 










